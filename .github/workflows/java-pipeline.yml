# name: Java Full CI/CD Pipeline

# on:
#   workflow_call:
#     inputs:
#       java-version:
#         required: false
#         type: string
#         default: '17'
#       docker-image:
#         required: true
#         type: string
#       sonar-enabled:
#         required: false
#         type: boolean
#         default: false
#     secrets:
#       GHCR_TOKEN:
#         required: true
#       GHCR_USERNAME:
#         required: true
#       SONAR_TOKEN:
#         required: false
#       SONAR_HOST_URL:
#         required: false

# jobs:
#   build:
#     name: Build and Deploy
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up JDK
#         uses: actions/setup-java@v4
#         with:
#           distribution: 'temurin'
#           java-version: ${{ inputs.java-version }}

#       - name: Cache SonarQube packages
#         uses: actions/cache@v4
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar

#       - name: Cache Maven packages
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2

#       - name: Build with Maven
#         run: mvn clean install -DskipTests

#       # - name: Run SonarQube Analysis
#       #   if: ${{ inputs.sonar-enabled }}
#       #   env:
#       #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#       #   run: >
#       #     mvn -B verify
#       #     org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
#       #     -Dsonar.projectKey=java-starter
#       #     -Dsonar.projectName='java-starter'

#       - name: Package Artifact
#         run: mvn package -DskipTests

#       - name: Upload Artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: java-app
#           path: target/*.war

#       - name: Log in to GHCR
#         run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

#       - name: Build Docker image
#         run: docker build -t ${{ inputs.docker-image }}:${{ github.sha }} .

#       - name: Push Docker image
#         run: docker push ${{ inputs.docker-image }}:${{ github.sha }}


name: Reusable Java Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  
  # workflow_call:
  #   inputs:
  #     java-version:
  #       required: false
  #       type: string
  #       default: '17'
  #     project-key:
  #       required: false
  #       type: string
  #       default: 'java-app'
  #     artifact-name:
  #       required: false
  #       type: string
  #       default: 'java-app'
  #     artifact-path:
  #       required: false
  #       type: string
  #       default: 'target/*.war'
  #   secrets:
  #     GHCR_USERNAME:
  #       required: true
  #     GHCR_TOKEN:
  #       required: true
  #     SONAR_TOKEN:
  #       required: false
  #     SONAR_HOST_URL:
  #       required: false
  

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Uncomment if you want to enable test stage
      # - name: Run Unit Tests
      #   run: mvn test

      - name: SonarQube analysis
        if: ${{ secrets.SONAR_TOKEN != '' && secrets.SONAR_HOST_URL != '' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=${{ inputs.project-key }} \
            -Dsonar.projectName='${{ inputs.project-key }}'

      - name: Package Artifact
        run: mvn package -DskipTests

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}

      - name: Create Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${GHCR_USERNAME}</username>
                <password>${GHCR_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Publish WAR to GitHub Packages
        run: mvn deploy -DskipTests --settings ~/.m2/settings.xml

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ghcr.io/sunaina0510/java/java-app:${{ github.sha }} .

      - name: Push Docker image
        run: docker push ghcr.io/sunaina0510/java/java-app:${{ github.sha }}

